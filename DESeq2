library("dplyr")
library("ggplot2")
library(DESeq2)
library(tximport)
library(readr)
library("vsn")
library("pheatmap")
library("RColorBrewer")
library(ComplexHeatmap)

# make rice transcript database TxDb file
Os_tx2gene <- read.csv ("Os_tx2gene.csv", header = TRUE)
Os_tx2gene <- Os_tx2gene[,-1]

head (Os_tx2gene)

library(tximport)
library(readr)
files = list.files(pattern="*quant.sf")
files
txi <- tximport(files, type = "salmon", tx2gene = Os_tx2gene)


#make sample table

sampleTable <- data.frame(condition = c(rep("0_BSS",3), rep("0_M", 3), rep("5_BSS",3), rep("5_M", 3),
                                        rep("10_BSS",3), rep("10_M", 3), 
                                        rep("30_BSS",3), rep("30_M", 3)))


rownames(sampleTable) <- c("BSS_0_1","BSS_0_2","BSS_0_3","M_0_1","M_0_2","M_0_3",
                           "BSS_5_1","BSS_5_2","BSS_5_3", "M_5_1","M_5_2","M_5_3",
                           "BSS_10_1","BSS_10_2","BSS_10_3","M_10_1","M_10_2","M_10_3",
                           "BSS_30_1","BSS_30_2","BSS_30_3","M_30_1","M_30_2","M_30_3")
sampleTable

# extract raw counts from txi object
rawcounts <- txi$counts

head(rawcounts)
class(rawcounts)
colnames(rawcounts)<- c("BSS_0_1","BSS_0_2","BSS_0_3","M_0_1","M_0_2","M_0_3",
                        "BSS_5_1","BSS_5_2","BSS_5_3", "M_5_1","M_5_2","M_5_3",
                        "BSS_10_1","BSS_10_2","BSS_10_3","M_10_1","M_10_2","M_10_3",
                        "BSS_30_1","BSS_30_2","BSS_30_3","M_30_1","M_30_2","M_30_3")

rawcounts <- rawcounts[, c("BSS_0_1","BSS_0_2","BSS_0_3",
                           "BSS_5_1","BSS_5_2","BSS_5_3",
                           "BSS_10_1","BSS_10_2","BSS_10_3",
                           "BSS_30_1","BSS_30_2","BSS_30_3",
                           "M_0_1","M_0_2","M_0_3",
                           "M_5_1","M_5_2","M_5_3",
                           "M_10_1","M_10_2","M_10_3",
                           "M_30_1","M_30_2","M_30_3")]
head(rawcounts)

write.csv(rawcounts, file= "haiyan_highlight_rawcounts.csv")

dds <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)
head(dds)
colData(dds)

head(dds)

colnames(dds)<- c("BSS_0_1","BSS_0_2","BSS_0_3","M_0_1","M_0_2","M_0_3",
                  "BSS_5_1","BSS_5_2","BSS_5_3", "M_5_1","M_5_2","M_5_3",
                  "BSS_10_1","BSS_10_2","BSS_10_3","M_10_1","M_10_2","M_10_3",
                  "BSS_30_1","BSS_30_2","BSS_30_3","M_30_1","M_30_2","M_30_3")

dds<-dds[,c("BSS_0_1","BSS_0_2","BSS_0_3",
            "BSS_5_1","BSS_5_2","BSS_5_3",
            "BSS_10_1","BSS_10_2","BSS_10_3",
            "BSS_30_1","BSS_30_2","BSS_30_3",
            "M_0_1","M_0_2","M_0_3",
            "M_5_1","M_5_2","M_5_3",
            "M_10_1","M_10_2","M_10_3",
            "M_30_1","M_30_2","M_30_3")]

# prefilter the data
nrow(dds)
dds <- estimateSizeFactors(dds)

idx <- rowMeans(counts(dds, normalized=TRUE)) >= 10

dds <- dds[idx,]


class(dds)
head(dds)
nrow(dds)
dim(dds)

save(dds,file="dds_basemean_10.RData")

# get and save normalized counts
norm <- as.data.frame(counts(dds, normalized=TRUE ))
head (norm)

write.csv(norm, "haiyan_highlight_normalized_counts_basemean_10.csv")
norm$GENEID<-rownames(norm)

#tpm
tpm <- txi$abundance
head(tpm)
colnames(tpm)<- c("BSS_0_1","BSS_0_2","BSS_0_3","M_0_1","M_0_2","M_0_3",
                  "BSS_5_1","BSS_5_2","BSS_5_3", "M_5_1","M_5_2","M_5_3",
                  "BSS_10_1","BSS_10_2","BSS_10_3","M_10_1","M_10_2","M_10_3",
                  "BSS_30_1","BSS_30_2","BSS_30_3","M_30_1","M_30_2","M_30_3")

tpm<-tpm[,c("BSS_0_1","BSS_0_2","BSS_0_3",
            "BSS_5_1","BSS_5_2","BSS_5_3",
            "BSS_10_1","BSS_10_2","BSS_10_3",
            "BSS_30_1","BSS_30_2","BSS_30_3",
            "M_0_1","M_0_2","M_0_3",
            "M_5_1","M_5_2","M_5_3",
            "M_10_1","M_10_2","M_10_3",
            "M_30_1","M_30_2","M_30_3")]
head(tpm)

tpm<-as.data.frame(tpm)

write.csv(tpm, file = "haiyan_highlight_raw TPM.csv")
tpm$GENEID<-rownames(tpm)

#select normlised TPM


tpm_norm <- subset(tpm, tpm$GENEID %in% norm$GENEID)
tpm_norm<-tpm_norm[,c(1:24)]
head(tpm_norm)

log2_tpm <-log2(tpm_norm +1)
head(log2_tpm)

write.csv(tpm_norm, file = "haiyan_highlight_normlised_TPM_basemean10.csv")
write.csv(log2_tpm, file = "haiyan_highlight_log2_TPM_basemean10.csv")


# We plot the standard deviation of each row (genes) against the mean

lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
library("vsn")
meanSdPlot(cts, ranks = FALSE)


# for logarithm-transformed counts:
log.cts.one <- log2(cts + 1)
meanSdPlot(log.cts.one, ranks = FALSE)

rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)

vsd <- vst(dds, blind = FALSE)

head(assay(vsd), 3)

library("dplyr")
library("ggplot2")

df <- bind_rows(
  as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
    mutate(transformation = "log2(x + 1)"),
  as_data_frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"),
  as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))

colnames(df)[1:2] <- c("x", "y")  

ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
  coord_fixed() + facet_grid( . ~ transformation)  

#
df <- bind_rows(
  as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
    mutate(transformation = "log2(x + 1)"))

colnames(df)[1:2] <- c("x", "y")  

ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
  coord_fixed() + facet_grid( . ~ transformation)  

sampleDists <- dist(t(assay(rld)))
sampleDists

library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )

write.csv(sampleDistMatrix,file="heatmap_sampleDistance.csv")


colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,
         col = colors)

# sample distance
library("PoiClaClu")
poisd <- PoissonDistance(t(counts(dds)))

samplePoisDistMatrix <- as.matrix( poisd$dd )

pheatmap(samplePoisDistMatrix,
         clustering_distance_rows = poisd$dd,
         clustering_distance_cols = poisd$dd,
         col = colors)

plotPCA(rld, intgroup =c("celltype","minute"))

pcaData <- plotPCA(rld, intgroup = c("celltype","minute"), returnData = TRUE)

pcaData

write.csv(pcaData, "pcaData_vsd normalized.csv")

percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData, aes(x = PC1, y = PC2, shape = minute, color = celltype)) +
  geom_point(size = 3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed()


mds <- as.data.frame(colData(rld)) %>% cbind(cmdscale(sampleDistMatrix))

ggplot(mds, aes(x = `1`, y = `2`, color = celltype, shape = minute)) + 
  geom_point(size = 3) + 
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed()

?coord_fixed()


#DE gene analysis

dds <- DESeq(dds, betaPrior=FALSE)
head(dds)


# pairwise comparision 
##no big change if use lfcShink function, but p-value is not consistent with pairwise comparasion##
res<-results(dds)

BSS_5_vs_BSS_0<-lfcShrink(dds, contrast=c("condition", "5_BSS", "0_BSS"))
summary(BSS_5_vs_BSS_0)
# head(BSS_5_vs_BSS_0)
BSS_10_vs_BSS_0<-lfcShrink(dds, contrast=c("condition", "10_BSS", "0_BSS"))
#summary(BSS_10_vs_BSS_0)
# head(BSS_10_vs_BSS_0)
BSS_30_vs_BSS_0<-lfcShrink(dds, contrast=c("condition", "30_BSS", "0_BSS"))
# summary(BSS_30_vs_BSS_0)
# # head(BSS_30_vs_BSS_0)
BSS_10_vs_BSS_5<-lfcShrink(dds, contrast=c("condition", "10_BSS", "5_BSS"))
# summary(BSS_10_vs_BSS_5)
# head(BSS_10_vs_BSS_5)
BSS_30_vs_BSS_5<-lfcShrink(dds, contrast=c("condition", "30_BSS", "5_BSS"))
#summary(BSS_30_vs_BSS_5)
# head(BSS_30_vs_BSS_5)
BSS_30_vs_BSS_10<-lfcShrink(dds, contrast=c("condition", "30_BSS", "10_BSS"))
#summary(BSS_30_vs_BSS_10)
# head(BSS_30_vs_BSS_10)


M_5_vs_M_0<-lfcShrink(dds, contrast=c("condition", "5_M", "0_M"))
summary(M_5_vs_M_0)
# head(M_5_vs_M_0)
M_10_vs_M_0<-lfcShrink(dds, contrast=c("condition", "10_M", "0_M"))
#summary(M_10_vs_M_0)
# head(M_10_vs_M_0)
M_30_vs_M_0<-lfcShrink(dds, contrast=c("condition", "30_M", "0_M"))
# summary(M_30_vs_M_0)
# # head(M_30_vs_M_0)
M_10_vs_M_5<-lfcShrink(dds, contrast=c("condition", "10_M", "5_M"))
# summary(M_10_vs_M_5)
# head(M_10_vs_M_5)
M_30_vs_M_5<-lfcShrink(dds, contrast=c("condition", "30_M", "5_M"))
#summary(M_30_vs_M_5)
# head(M_30_vs_M_5)
M_30_vs_M_10<-lfcShrink(dds, contrast=c("condition", "30_M", "10_M"))
#summary(M_30_vs_M_10)
# head(M_30_vs_M_10)


BSS_0_vs_M_0<-lfcShrink(dds, contrast=c("condition", "0_BSS", "0_M"))
#summary(BSS_0_vs_M_0)
#head(BSS_0_vs_M_0)
BSS_5_vs_M_0<-lfcShrink(dds, contrast=c("condition", "5_BSS", "0_M"))
#summary(BSS_5_vs_M_0)
#head(BSS_5_vs_M_0)
BSS_10_vs_M_0<-lfcShrink(dds, contrast=c("condition", "10_BSS", "0_M"))
#summary(BSS_10_vs_M_0)
#head(BSS_10_vs_M_0)
BSS_30_vs_M_0<-lfcShrink(dds, contrast=c("condition", "30_BSS", "0_M"))
#summary(BSS_30_vs_M_0)
#head(BSS_30_vs_M_0)


BSS_0_vs_M_5<-lfcShrink(dds, contrast=c("condition", "0_BSS", "5_M"))
#summary(BSS_10_vs_M_5)
#head(BSS_10_vs_M_5)
BSS_5_vs_M_5<-lfcShrink(dds, contrast=c("condition", "5_BSS", "5_M"))
#summary(BSS_5_vs_M_5)
#head(BSS_5_vs_M_5)
BSS_10_vs_M_5<-lfcShrink(dds, contrast=c("condition", "10_BSS", "5_M"))
#summary(BSS_10_vs_M_5)
#head(BSS_10_vs_M_5)
BSS_30_vs_M_5<-lfcShrink(dds, contrast=c("condition", "30_BSS", "5_M"))
#summary(BSS_30_vs_M_5)
#head(BSS_30_vs_M_5)


BSS_0_vs_M_10<-lfcShrink(dds, contrast=c("condition", "0_BSS", "10_M"))
#summary(BSS_10_vs_M_10)
#head(BSS_10_vs_M_10)
BSS_5_vs_M_10<-lfcShrink(dds, contrast=c("condition", "5_BSS", "10_M"))
#summary(BSS_5_vs_M_10)
#head(BSS_5_vs_M_10)
BSS_10_vs_M_10<-lfcShrink(dds, contrast=c("condition", "10_BSS", "10_M"))
#summary(BSS_10_vs_M_10)
#head(BSS_10_vs_M_10)
BSS_30_vs_M_5<-lfcShrink(dds, contrast=c("condition", "30_BSS", "10_M"))
#summary(BSS_30_vs_M_10)
#head(BSS_30_vs_M_10)

BSS_0_vs_M_30<-lfcShrink(dds, contrast=c("condition", "0_BSS", "30_M"))
#summary(BSS_10_vs_M_30)
#head(BSS_10_vs_M_30)
BSS_5_vs_M_30<-lfcShrink(dds, contrast=c("condition", "5_BSS", "30_M"))
#summary(BSS_5_vs_M_30)
#head(BSS_5_vs_M_30)
BSS_10_vs_M_30<-lfcShrink(dds, contrast=c("condition", "10_BSS", "30_M"))
#summary(BSS_10_vs_M_30)
#head(BSS_10_vs_M_30)
BSS_30_vs_M_30<-lfcShrink(dds, contrast=c("condition", "30_BSS", "30_M"))
#summary(BSS_30_vs_M_30)
#head(BSS_30_vs_M_30)


# write res into .csv
write.csv(BSS_5_vs_BSS_0, file= "BSS_5_vs_BSS_0_basemean10.csv")
write.csv(BSS_10_vs_BSS_0, file= "BSS_10_vs_BSS_0_basemean10.csv")
write.csv(BSS_30_vs_BSS_0, file= "BSS_30_vs_BSS_0_basemean10.csv")
write.csv(BSS_10_vs_BSS_5, file= "BSS_10_vs_BSS_5_basemean10.csv")
write.csv(BSS_30_vs_BSS_10, file= "BSS_30_vs_BSS_10_basemean10.csv")
write.csv(BSS_30_vs_BSS_5, file= "BSS_30_vs_BSS_5_basemean10.csv")

write.csv(M_5_vs_M_0, file= "M_5_vs_M_0_basemean10.csv")
write.csv(M_10_vs_M_0, file= "M_10_vs_M_0_basemean10.csv")
write.csv(M_30_vs_M_0, file= "M_30_vs_M_0_basemean10.csv")
write.csv(M_10_vs_M_5, file= "M_10_vs_M_5_basemean10.csv")
write.csv(M_30_vs_M_10, file= "M_30_vs_M_10_basemean10.csv")
write.csv(M_30_vs_M_5, file= "M_30_vs_M_5_basemean10.csv")

write.csv(BSS_0_vs_M_0, file= "BSS_0_vs_M_0_basemean10.csv")
write.csv(BSS_5_vs_M_0, file= "BSS_5_vs_M_0_basemean10.csv")
write.csv(BSS_10_vs_M_0, file= "BSS_10_vs_M_0_basemean10.csv")
write.csv(BSS_30_vs_M_0, file= "BSS_30_vs_M_0_basemean10.csv")

write.csv(BSS_0_vs_M_5, file= "BSS_0_vs_M_5_basemean10.csv")
write.csv(BSS_5_vs_M_5, file= "BSS_5_vs_M_5_basemean10.csv")
write.csv(BSS_10_vs_M_5, file= "BSS_10_vs_M_5_basemean10.csv")
write.csv(BSS_30_vs_M_5, file= "BSS_30_vs_M_5_basemean10.csv")

write.csv(BSS_0_vs_M_10, file= "BSS_0_vs_M_10_basemean10.csv")
write.csv(BSS_5_vs_M_10, file= "BSS_5_vs_M_10_basemean10.csv")
write.csv(BSS_10_vs_M_10, file= "BSS_10_vs_M_10_basemean10.csv")
write.csv(BSS_30_vs_M_10, file= "BSS_30_vs_M_10_basemean10.csv")

write.csv(BSS_0_vs_M_30, file= "BSS_0_vs_M_30_basemean10.csv")
write.csv(BSS_5_vs_M_30, file= "BSS_5_vs_M_30_basemean10.csv")
write.csv(BSS_10_vs_M_30, file= "BSS_10_vs_M_30_basemean10.csv")
write.csv(BSS_30_vs_M_30, file= "BSS_30_vs_M_30_basemean10.csv")

# make MA plot
warnings()
plotMA( BSS_5vs0, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( BSS_10vs0, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( BSS_30vs0, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( BSS_10vs5, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( BSS_30vs10, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized countsn", ylab="log fold change")
plotMA( M_5vs0, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( M_10vs0, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( M_30vs0, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean expression", ylab="log fold change")
plotMA( M_10vs5, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( M_30vs10, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean expression", ylab="log fold change")
plotMA( BSSvsM_0, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean expression", ylab="log fold change")
plotMA( BSSvsM_5, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( BSSvsM_10, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change")
plotMA( BSSvsM_30, ylim =c(-10, 10),FDR.threshold = 0.05,fc.thresh = 0.5,use.pch = 20,
        colNonSig = "gray32", colSig = "red3", colLine = "#ff000080",
        log = "x", cex=0.45, xlab="mean of normalized counts", ylab="log fold change", MLE=TRUE)

#Histogram of p values for genes with mean normalized count larger than 1

hist(BSS_5vs0$pvalue, breaks = 0:20/20,col = "grey50", border = "white")
hist(BSS_10vs0$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(BSS_30vs0$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(BSS_10vs5$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(BSS_30vs10$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(M_5vs0$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(M_10vs0$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(M_30vs0$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(M_10vs5$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(M_30vs10$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(BSSvsM_0$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(BSSvsM_5$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(BSSvsM_10$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
hist(BSSvsM_30$pvalue, breaks = 0:20/20, col = "grey50", border = "white")
#gene clustering

library("genefilter") 

head(rowVars(assay(rld)))

topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 10000)

mat <- assay(rld)[ topVarGenes, ] 
mat <- mat- rowMeans(mat)
head(mat)
anno <- as.data.frame(colData(rld)) 

pheatmap(mat,annotation_col = anno)


write.csv(mat, file= "TopVarGenes_10000_rld-rowmeans_transformed.csv")
